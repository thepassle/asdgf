var l=class{constructor(t){this._calls=new Set,this.original=t;let e=this;this.handler=function(...a){return e._handleCall.call(e,this,a)}}get called(){return this._calls.size>0}get calls(){return this._calls}getCall(t){return[...this._calls][t]}get firstCall(){return this.getCall(0)}get lastCall(){return this.getCall(this.callCount-1)}get callCount(){return this._calls.size}_handleCall(t,e){let s=this._returnFunction?this._returnFunction.apply(t,e):this._returnValue;return this._calls.add({args:e,thisValue:t,returnValue:s}),s}returns(t){this._returnFunction=void 0,this._returnValue=t}callsFake(t){this._returnValue=void 0,this._returnFunction=t}passThrough(){this.callsFake(this.original)}reset(){this._calls.clear()}restore(){this.restoreCallback&&this.restoreCallback()}calledWith(...t){return[...this.calls].some(e=>e.args.length===t.length&&e.args.every((s,a)=>t[a]===s))}returned(t){return[...this.calls].some(e=>e.returnValue===t)}},n=new Set;function u(r,t){let e=new l(r[t]);return r[t]=e.handler,e.restoreCallback=()=>{r[t]=e.original,n.delete(e)},n.add(e),e}function i(r){return new l(r)}function c(){return new l(()=>{})}function o(){for(let r of n)r.restore();n.clear()}export{o as restore,c as spy,i as stub,u as stubMethod};
